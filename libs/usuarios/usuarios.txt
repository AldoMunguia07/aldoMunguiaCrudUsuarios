//const Usuario = require('./index');
const Usuario = require('./index.js');
const Conexion = require('../../dao/Connection');
const UsuarioDao = require('../../dao/sqlite/models/UsuarioDao');
const fs = require('fs');

describe('Testing Usuarios CRUD', ()=>{

    const env = process.env;
    let db, UsrDao, Usr;
    //Dado que....al ejecutar | procesar | activar.... se sepera que....

    beforeAll(async ()=>{
        jest.resetModules();
        process.env = {
            ...env,
            SQLITE_DB:"user_test.db",
            SQLITE_SETUP:1
        };

        db = await Conexion.getDB();
        UsrDao = new UsuarioDao(db);
        Usr = new Usuario(UsrDao);
        await Usr.init();

        await Usr.addUsuario({
            nombreCompleto: "test1", email: "test1@gmail.com", estado: "ACT", avatar: "testAvatar1", password: "pepito", fechaIngreso: "1"
        });

        await Usr.addUsuario({
            nombreCompleto: "test2", email: "test2@gmail.com", estado: "ACT", avatar: "testAvatar2", password: "pepito", fechaIngreso: "2"
        });

        await Usr.addUsuario({
            nombreCompleto: "test3", email: "test3@gmail.com", estado: "ACT", avatar: "testAvatar3", password: "pepito", fechaIngreso: "3"
        });

        return true;

    });

    afterAll(async ()=>{
        db.close();
        fs.unlinkSync(`data/${process.env.SQLITE_DB}`);
        process.env = env;
        return true;

    });




    test('Usuarios insertOne', async()=>{
        const result = await Usr.addUsuario({
            nombreCompleto: "test3", email: "test3@gmail.com", estado: "ACT", avatar: "testAvatar3", fechaIngreso: "3"
        });
        expect(result.id).toBeGreaterThanOrEqual(1);
    });

    test('Usuarios getAll Records', async()=>{
        const result = await Usr.getUsuarios();
        expect(result.length).toBeGreaterThan(1);

    });

    test('Usuarios updateOne Record', async()=>{
        const record = await Usr.getUsuarioByID({id:2});
        const updatedRecord = await Usr.updateUsuario({
           id:2, nombreCompleto: "test3", email: "test3@gmail.com", estado: "ACT", avatar: "testAvatar3", fechaIngreso: "3"
        });
        expect(updatedRecord?.nombreCompleto).toEqual(expect.stringContaining("test3"));

    });

    test('Usuario deleteOne', async () =>{
        const result = await Usr.deleteUsuario({id:2});
        const deletedRecord = await Usr.getUsuarioByID({id:2});
        expect(deletedRecord).not.toBeDefined();
    });

    test('Usuario pasword Crypted', async() =>{

    });
    test('Usuario login ok', async() =>{

    });

    test('Usuario login falied', async() =>{

    });

    test('Usuario email duplicate', async() =>{

    });
});